from States_Analyser import states_analyser


def States_data_generator(actual_leafs, alf, probs_conds):

    def leafs_complementer(Folhas_Atual, Folhas, Alfabeto, probs_conds):

        # cria um dicionario com elementos na forma {contexto: [(letra do alf.,contexto subsequente,prob. condicional do contexto associada a letra)]}

        print("\n-*-*- ROTINA DE CRIAÇÃO DE ESTADOS DO PFSA EM EXECUÇÃO -*-*-")

        # states=[]

        dic = {}  # armazena o dicionário final que contem os dados de cada outedge gerado

        outs = []

        new_ctx = []

        for f in Folhas_Atual:  # para cada folha no conjunto de folhas atualmente analisado...

            # pbs = cop[f]

            print(F"\nANALISANDO q = {f}:")

            for letra in Alfabeto:  # ...tome cada uma das letras no alfabeto da sequencia...

                next = f + letra  # ... e faça a contanação da folha com a letra à esquerda, criando o contexto 'next'.

                cont = 0  # variavel para realizar contabilização de não identificação de folhas como sufixo para 'next'

                for context in Folhas:  # para cada um dos contextos(folhas) no conjunto original de folhas analisado

                    if next.endswith(context):    # se alguma folha é identificada como sufixo da concatenação 'next'

                        pass  # apenas indique a identificação

                        print(f"EXTENSÃO {next} --> q = {context} IDENTIFICADO COMO TRANSIÇÃO PARA {next}")

                        # outs.append((letra, context, pbs[letra+"|"+f]))

                    else:  # caso não se identifique qualquer folha como sufixo para 'next'...

                        # print(f"Concatenação {next} não associada à folha", element)

                        cont += 1  # itere o contador

                if cont == len(Folhas):  # se o valor em 'cont' na rodada é igual ao total de folhas originais...

                    print(f"\nEXTENSÃO {next} --> Não foi identificada folha entre as atuais como sufixo para esse contexto. "
                          f"Armazenada para adição no conjunto de folhas atuias.")

                    new_ctx.append(next)  # armazene 'next' em "new_ctx' para ser adiconado às folhas originais
            print("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -")

        if new_ctx:  # se houver algum contexto armazenado em 'new_ctx', realiza nova analise das folhas...

            Folhas += new_ctx  # ...adicionando o elemento contido em 'new_ctx' as folhas atuais...

            print(f"\nAdicionando contexto(s) {new_ctx} às folhas atuais...")

            print(f"\nNovo conjunto de folhas a analisar: {Folhas}")

            leafs_complementer(new_ctx, Folhas, Alfabeto, probs_conds)  # ...e reexecutando esta função.

        return Folhas  # RETORNA AS FOLHAS DEVIDAMENTE COMPLEMENTADAS

    def leafs_probs_data(Folhas, alfabeto, conditional_probs):

        lpd = {}  # dicinario para armazenar as probabilidades condicionais de contextos analisados

        for f in Folhas:

            adendo = {}  # varivel auxiliar para armazenar as probabilidades condicionais tomadas no atual ciclo

            # na lista de dicionarios de probab. condic. correspondente ao contexto (folha) 'f' analisada no momento...
            for k1,v1 in conditional_probs[len(f)].items():

                if k1.endswith(f): #...se a chave no dic. termina pelo contexto 'f'...

                    adendo[k1] = v1  # ...armazene esta prob. condicional em 'adendo'.

            if not adendo:  # se 'adendo' não recebeu qualquer dado (ou seja, 'f' não possui prob. cond. calculada)...

                for l in alfabeto:

                    adendo[l + "|" + f] = 0.0  # ... adicione 'f' em adendo com prob. cond. igual a zero.

                lpd[f] = adendo  # 'lpd' recebe 'adendo', guardando assim os dados de prob. cond. do contexto 'f'

            else:  # os dados que ja foram adiconados em 'adendo'...

                lpd[f] = adendo  # ...são passados para 'lpd'

        return lpd  # RETORNA O DICIONARIO QUE CONTEM CADA FOLHA (CONTEXTO) COM SUA RESPECTIVA PROBABILIDADE CONDICIONAL

    def generate_states_data(Folhas, alfabeto, COP):

        states_data = {}  #dicionario que armazenará os estados uteis para construção de maquina de estados

        outs = []  # variavel auxiliar para armazenamento das tuplas que correspondem aos outedges de um estado

        for l in Folhas:  # para cada elemento  'l' no conjutno de contextos (folhas complemntadas)...

            pbs = COP[l]  # ... tomamos o contexto e seus dados de outedges presente no dicionacio de dados 'COP'...

            for letter in alfabeto:  # ...e para cada letra do alfabeto da sequencia...

                next = l + letter  #...geramos 'next' pela contatenação de 'l' com 'letter' à esquerda...

                # print("\nANALISANDO PALAVRA ", next)

                sufix = []  # variavel auxiliar para armazenar

                for element in Folhas:

                    if next.endswith(element):    #se alguma das folhas é sufixo da concatenação analisada no momento...

                        #print(f"FOLHA {element} IDENTIFICADA COMO SUFIXO PARA {next}")

                        sufix.append(element)  #...armazene tal folha em 'sufix'

                #print(sufix)
                #print("---")

                '''Neste trecho do código, faz-se a seleção do contexto de maior comprimento que é sufixo
                da concatenação atualmente analisada'''

                if len(sufix) > 1:  # se ha apenas um item em 'sufix' (unico 'element' é sufixo para 'next')...

                    lens = [len(s) for s in sufix]  #...armazena os comprimento dos contextos em 'sufix'...

                    max_ctx = sufix[lens.index(max(lens))] #  ...e toma-se o elemento de maior comprimento.

                    out_prob = pbs[letter+ "|" + l]  # toma-se as prob. cond. do contexto analisado nesse ciclo...

                    if out_prob != 0:  #... e se apresenta prob. não nula...
                        outs.append((letter, max_ctx, out_prob))  # ...ela é utilizada para compor a tupla de outedge

                else:  # se há apenas um item em 'sufix', os seus dados são tomados para compor a tupla de seu outedge.
                    out_prob = pbs[letter + "|" + l]
                    if out_prob != 0:
                        outs.append((letter, sufix[0], out_prob))


            states_data[l] = outs  # 'states_data' é então preenchido com o estado 'l' e suas tuplas de outedge 'outs'

            outs=[]  # outs é reinicializada para a execução de um novo ciclo da análise.

        # for s in states_data.items():
        #    print(s)

        return states_data  # RETORNA O DICIONARIO COMPOSTO PELO CONJUNTO DE ESTADO INICIAIS GERADOS COM AS FOLHAS

    leafs_comp = leafs_complementer(actual_leafs, actual_leafs, alf, probs_conds)  # Complementa as folhas iniciais

    l_p_d = leafs_probs_data(leafs_comp, alf, probs_conds)  # obtem as prob. condic. das folhas complementadas

    sts_dt = generate_states_data(leafs_comp, alf, l_p_d)  # organiza dados dos contextos na forma de estados p/ maquina

    usefull_states = states_analyser(sts_dt)  # refina os estados, removendo strandeds

    print("\n*-*-* ROTINA DE CRIAÇÃO DE ESTADOS CONCLUIDA! *-*-*")

    return usefull_states  # RETORNA OS DADOS UTEIS À GERAÇÃO DE MAQUINA DE ESTADOS


if __name__ == "__main__":

    """CONJUNTO DE FOLHAS GERADOS PARA THRESHOLD = 0.4"""

    folhas_3_0p528 = ['0', '001', '101', '201', '011', '111', '211', '21', '02', '012', '112', '212', '22']

    folhas_3 = ['000', '100', '200', '010', '110', '210', '020', '120', '220', '001', '101', '201', '011', '111', '211',
                '21', '02', '012', '112', '212', '22']                                                                  #<------------- L = 3 (total 21)

    folhas_4 = ['000', '100', '0200', '1200', '2200', '0010', '1010', '2010', '0110', '1110', '2110', '210', '0020',
                '1020', '2020', '0120', '1120', '2120', '220', '001', '101', '0201', '1201', '2201', '0011', '1011',
                '2011', '0111', '1111', '2111', '211', '21', '02', '0012', '1012', '2012', '0112', '1112', '2112',
                '212', '22']                                                                                            #<------------- L = 4 (total 41)'''

    folhas_5 = ['000', '100', '00200', '10200', '20200', '1200', '2200', '0010', '1010', '02010', '12010', '22010',
                '00110', '10110', '20110', '01110', '11110', '21110', '2110', '210', '00020', '10020', '20020', '01020',
                '11020', '21020', '02020', '12020', '22020', '00120', '10120', '20120', '01120', '11120', '21120',
                '2120', '220', '001', '101', '00201', '10201', '20201', '1201', '2201', '0011', '1011', '02011',
                '12011', '22011', '00111', '10111', '20111', '01111', '11111', '21111', '2111', '211', '21', '02',
                '0012', '1012', '02012', '12012', '22012', '00112', '10112', '20112', '01112', '11112', '21112',
                '2112', '212', '22']                                                                                    #<------------- L = 5 (total 73)

    folhas_6 = ['000', '100', '00200', '10200', '020200', '120200', '220200', '1200', '2200', '0010', '1010', '002010',
                '102010', '202010', '12010', '22010', '00110', '10110', '020110', '120110', '220110', '001110',
                '101110', '201110', '011110', '111110', '211110', '21110', '2110', '210', '00020', '10020', '020020',
                '120020', '220020', '001020', '101020', '201020', '011020', '111020', '211020', '21020', '002020',
                '102020', '202020', '012020', '112020', '212020', '22020', '00120', '10120', '020120', '120120',
                '220120', '001120', '101120', '201120', '011120', '111120', '211120', '21120', '2120', '220', '001',
                '101', '00201', '10201', '020201', '120201', '220201', '1201', '2201', '0011', '1011', '002011',
                '102011', '202011', '12011', '22011', '00111', '10111', '020111', '120111', '220111', '001111',
                '101111', '201111', '011111', '111111', '211111', '21111', '2111', '211', '21', '02', '0012', '1012',
                '002012', '102012', '202012', '12012', '22012', '00112', '10112', '020112', '120112', '220112',
                '001112', '101112', '201112', '011112', '111112', '211112', '21112', '2112', '212', '22']               #<------------- L = 6 (total 117)

    folhas_7 = ['000', '100', '00200', '10200', '020200', '0120200', '1120200', '2120200', '220200', '1200', '2200',
                '0010', '1010', '002010', '102010', '0202010', '1202010', '2202010', '12010', '22010', '00110', '10110',
                '0020110', '1020110', '2020110', '120110', '220110', '001110', '101110', '0201110', '1201110', '2201110',
                '0011110', '1011110', '2011110', '0111110', '1111110', '2111110', '211110', '21110', '2110', '210',
                '00020', '10020', '0020020', '1020020', '2020020', '120020', '220020', '001020', '101020', '0201020',
                '1201020', '2201020', '0011020', '1011020', '2011020', '0111020', '1111020', '2111020', '211020',
                '21020', '0002020', '1002020', '2002020', '0102020', '1102020', '2102020', '0202020', '1202020',
                '2202020', '0012020', '1012020', '2012020', '0112020', '1112020', '2112020', '212020', '22020',
                '00120', '10120', '0020120', '1020120', '2020120', '120120', '220120', '001120', '101120', '0201120',
                '1201120', '2201120', '0011120', '1011120', '2011120', '0111120', '1111120', '2111120', '211120',
                '21120', '2120', '220', '001', '101', '00201', '10201', '020201', '0120201', '1120201', '2120201',
                '220201', '1201', '2201', '0011', '1011', '002011', '102011', '0202011', '1202011', '2202011', '12011',
                '22011', '00111', '10111', '0020111', '1020111', '2020111', '120111', '220111', '001111', '101111',
                '0201111', '1201111', '2201111', '0011111', '1011111', '2011111', '0111111', '1111111', '2111111',
                '211111', '21111', '2111', '211', '21', '02', '0012', '1012', '002012', '102012', '0202012', '1202012',
                '2202012', '12012', '22012', '00112', '10112', '0020112', '1020112', '2020112', '120112', '220112',
                '001112', '101112', '0201112', '1201112', '2201112', '0011112', '1011112', '2011112', '0111112',
                '1111112', '2111112', '211112', '21112', '2112', '212', '22']                                           #<------------- L = 7 (total 177)

    folhas_8 = ['000', '100', '00200', '10200', '020200', '00120200', '10120200', '20120200', '01120200', '11120200',
                '21120200', '2120200', '220200', '1200', '2200', '0010', '1010', '002010', '102010', '00202010',
                '10202010', '20202010', '01202010', '11202010', '21202010', '2202010', '12010', '22010', '00110',
                '10110', '0020110', '1020110', '02020110', '12020110', '22020110', '120110', '220110', '001110',
                '101110', '00201110', '10201110', '20201110', '1201110', '2201110', '0011110', '1011110', '02011110',
                '12011110', '22011110', '00111110', '10111110', '20111110', '01111110', '11111110', '21111110',
                '2111110', '211110', '21110', '2110', '210', '00020', '10020', '0020020', '1020020', '02020020',
                '12020020', '22020020', '120020', '220020', '001020', '101020', '00201020', '10201020', '20201020',
                '1201020', '2201020', '0011020', '1011020', '02011020', '12011020', '22011020', '00111020', '10111020',
                '20111020', '01111020', '11111020', '21111020', '2111020', '211020', '21020', '0002020', '1002020',
                '02002020', '12002020', '22002020', '00102020', '10102020', '20102020', '01102020', '11102020',
                '21102020', '2102020', '00202020', '10202020', '20202020', '01202020', '11202020', '21202020',
                '2202020', '0012020', '1012020', '02012020', '12012020', '22012020', '00112020', '10112020', '20112020',
                '01112020', '11112020', '21112020', '2112020', '212020', '22020', '00120', '10120', '0020120', '1020120',
                '02020120', '12020120', '22020120', '120120', '220120', '001120', '101120', '00201120', '10201120',
                '20201120', '1201120', '2201120', '0011120', '1011120', '02011120', '12011120', '22011120', '00111120',
                '10111120', '20111120', '01111120', '11111120', '21111120', '2111120', '211120', '21120', '2120', '220',
                '001', '101', '00201', '10201', '020201', '00120201', '10120201', '20120201', '01120201', '11120201',
                '21120201', '2120201', '220201', '1201', '2201', '0011', '1011', '002011', '102011', '00202011',
                '10202011', '20202011', '01202011', '11202011', '21202011', '2202011', '12011', '22011', '00111',
                '10111', '0020111', '1020111', '02020111', '12020111', '22020111', '120111', '220111', '001111',
                '101111', '00201111', '10201111', '20201111', '1201111', '2201111', '0011111', '1011111', '02011111',
                '12011111', '22011111', '00111111', '10111111', '20111111', '01111111', '11111111', '21111111',
                '2111111', '211111', '21111', '2111', '211', '21', '02', '0012', '1012', '002012', '102012', '0202012',
                '01202012', '11202012', '21202012', '2202012', '12012', '22012', '00112', '10112', '0020112', '1020112',
                '02020112', '12020112', '22020112', '120112', '220112', '001112', '101112', '00201112', '10201112',
                '20201112', '1201112', '2201112', '0011112', '1011112', '02011112', '12011112', '22011112', '00111112',
                '10111112', '20111112', '01111112', '11111112', '21111112', '2111112', '211112', '21112', '2112', '212',
                '22']                                                                                                   #<------------- L = 8 (total 261)

    alfabeto = ['0','1','2']

    conditional_probs = [


    {'0': 0.4590940131846118, '2': 0.36896853207167885, '1': 0.17193735474361926},
    {'0|0': 0.11645359464823733, '1|0': 0.18626724484941634, '2|0': 0.6972791605023464, '0|2': 1.0, '1|2': 0.0,
     '2|2': 0.0, '0|1': 0.21323017939108002, '1|1': 0.5026434070113971, '2|1': 0.2841264135975228},
    {'0|02': 1.0, '1|02': 0.0, '2|02': 0.0, '0|20': 0.14489893708997145, '1|20': 0.23176550174242658,
     '2|20': 0.6233355611676019, '0|00': 0.0, '1|00': 0.0, '2|00': 1.0, '0|01': 0.10968483560021097,
     '1|01': 0.506102502394342, '2|01': 0.3842126620054471, '0|11': 0.3156864310583629, '1|11': 0.4992206944671044,
     '2|11': 0.18509287447453288, '0|10': 0.0, '1|10': 0.0, '2|10': 1.0, '0|12': 1.0, '1|12': 0.0, '2|12': 0.0},
    {'0|020': 0.16701143708975863, '1|020': 0.2671343923647773, '2|020': 0.5658541705454642, '0|200': 0.0, '1|200': 0.0,
     '2|200': 1.0, '0|002': 1.0, '1|002': 0.0, '2|002': 0.0, '0|202': 1.0, '1|202': 0.0, '2|202': 0.0,
     '0|201': 0.10968483560021097, '1|201': 0.506102502394342, '2|201': 0.3842126620054471, '0|011': 0.431143120550661,
     '1|011': 0.42728673787919746, '2|011': 0.14157014157014158, '0|110': 0.0, '1|110': 0.0, '2|110': 1.0, '0|102': 1.0,
     '1|102': 0.0, '2|102': 0.0, '0|012': 1.0, '1|012': 0.0, '2|012': 0.0, '0|120': 0.0, '1|120': 0.0, '2|120': 1.0,
     '0|111': 0.19986927559208423, '1|111': 0.5713792352158575, '2|111': 0.2287514891920583, '0|112': 1.0, '1|112': 0.0,
     '2|112': 0.0, '0|010': 0.0, '1|010': 0.0, '2|010': 1.0},
    {'0|0200': 0.0, '1|0200': 0.0, '2|0200': 1.0, '0|2002': 1.0, '1|2002': 0.0, '2|2002': 0.0, '0|0020': 0.0,
     '1|0020': 0.0, '2|0020': 1.0, '0|0202': 1.0, '1|0202': 0.0, '2|0202': 0.0, '0|2020': 0.23245692222739153,
     '1|2020': 0.37181498406459385, '2|2020': 0.3957280937080147, '0|0201': 0.10968483560021097,
     '1|0201': 0.506102502394342, '2|0201': 0.3842126620054471, '0|2011': 0.431143120550661,
     '1|2011': 0.42728673787919746, '2|2011': 0.14157014157014158, '0|0110': 0.0, '1|0110': 0.0, '2|0110': 1.0,
     '0|1102': 1.0, '1|1102': 0.0, '2|1102': 0.0, '0|1020': 0.0, '1|1020': 0.0, '2|1020': 1.0, '0|2012': 1.0,
     '1|2012': 0.0, '2|2012': 0.0, '0|0120': 0.0, '1|0120': 0.0, '2|0120': 1.0, '0|1202': 1.0, '1|1202': 0.0,
     '2|1202': 0.0, '0|0111': 0.18592943085034475, '1|0111': 0.5710747600378532, '2|0111': 0.24299580911180213,
     '0|1111': 0.21032626553138323, '1|1111': 0.5716076376071427, '2|1111': 0.21806609686147405, '0|1112': 1.0,
     '1|1112': 0.0, '2|1112': 0.0, '0|1120': 0.0, '1|1120': 0.0, '2|1120': 1.0, '0|2010': 0.0, '1|2010': 0.0,
     '2|2010': 1.0, '0|0102': 1.0, '1|0102': 0.0, '2|0102': 0.0, '0|0112': 1.0, '1|0112': 0.0, '2|0112': 0.0,
     '0|1110': 0.0, '1|1110': 0.0, '2|1110': 1.0},
    {'0|02002': 1.0, '1|02002': 0.0, '2|02002': 0.0, '0|20020': 0.0, '1|20020': 0.0, '2|20020': 1.0, '0|00202': 1.0,
     '1|00202': 0.0, '2|00202': 0.0, '0|02020': 0.2906963263611631, '1|02020': 0.33131812440377345,
     '2|02020': 0.37798554923506344, '0|20201': 0.10968483560021097, '1|20201': 0.506102502394342,
     '2|20201': 0.3842126620054471, '0|02011': 0.431143120550661, '1|02011': 0.42728673787919746,
     '2|02011': 0.14157014157014158, '0|20110': 0.0, '1|20110': 0.0, '2|20110': 1.0, '0|01102': 1.0, '1|01102': 0.0,
     '2|01102': 0.0, '0|11020': 0.0, '1|11020': 0.0, '2|11020': 1.0, '0|10202': 1.0, '1|10202': 0.0, '2|10202': 0.0,
     '0|02012': 1.0, '1|02012': 0.0, '2|02012': 0.0, '0|20120': 0.0, '1|20120': 0.0, '2|20120': 1.0, '0|01202': 1.0,
     '1|01202': 0.0, '2|01202': 0.0, '0|12020': 0.016509081530094023, '1|12020': 0.5219735568115058,
     '2|12020': 0.46151736165840024, '0|20202': 1.0, '1|20202': 0.0, '2|20202': 0.0, '0|20111': 0.18592943085034475,
     '1|20111': 0.5710747600378533, '2|20111': 0.24299580911180213, '0|01111': 0.21640815862735077,
     '1|01111': 0.5718803855841524, '2|01111': 0.21171145578849687, '0|11112': 1.0, '1|11112': 0.0, '2|11112': 0.0,
     '0|11120': 0.0, '1|11120': 0.0, '2|11120': 1.0, '0|11202': 1.0, '1|11202': 0.0, '2|11202': 0.0, '0|02010': 0.0,
     '1|02010': 0.0, '2|02010': 1.0, '0|20102': 1.0, '1|20102': 0.0, '2|20102': 0.0, '0|01020': 0.0, '1|01020': 0.0,
     '2|01020': 1.0, '0|11111': 0.2057681799149818, '1|11111': 0.5714032261498393, '2|11111': 0.22282859393517895,
     '0|20200': 0.0, '1|20200': 0.0, '2|20200': 1.0, '0|20112': 1.0, '1|20112': 0.0, '2|20112': 0.0, '0|01120': 0.0,
     '1|01120': 0.0, '2|01120': 1.0, '0|11110': 0.0, '1|11110': 0.0, '2|11110': 1.0, '0|11102': 1.0, '1|11102': 0.0,
     '2|11102': 0.0, '0|01110': 0.0, '1|01110': 0.0, '2|01110': 1.0, '0|01112': 1.0, '1|01112': 0.0, '2|01112': 0.0},
    {'0|020020': 0.0, '1|020020': 0.0, '2|020020': 1.0, '0|200202': 1.0, '1|200202': 0.0, '2|200202': 0.0,
     '0|002020': 0.5417325220572693, '1|002020': 0.4582674779427306, '2|002020': 0.0, '0|020201': 0.08965136874799008,
     '1|020201': 0.4923876983472382, '2|020201': 0.4179609329047717, '0|202011': 0.431143120550661,
     '1|202011': 0.42728673787919746, '2|202011': 0.14157014157014158, '0|020110': 0.0, '1|020110': 0.0,
     '2|020110': 1.0, '0|201102': 1.0, '1|201102': 0.0, '2|201102': 0.0, '0|011020': 0.0, '1|011020': 0.0,
     '2|011020': 1.0, '0|110202': 1.0, '1|110202': 0.0, '2|110202': 0.0, '0|102020': 0.31434556573255285,
     '1|102020': 0.4753397232026446, '2|102020': 0.2103147110648024, '0|202012': 1.0, '1|202012': 0.0, '2|202012': 0.0,
     '0|020120': 0.0, '1|020120': 0.0, '2|020120': 1.0, '0|201202': 1.0, '1|201202': 0.0, '2|201202': 0.0,
     '0|012020': 0.016329027623905815, '1|012020': 0.5084490923921645, '2|012020': 0.4752218799839296, '0|120202': 1.0,
     '1|120202': 0.0, '2|120202': 0.0, '0|202020': 0.133707049143043, '1|202020': 0.19873118281932758,
     '2|202020': 0.6675617680376293, '0|020202': 1.0, '1|020202': 0.0, '2|020202': 0.0, '0|120201': 0.15683506278579104,
     '1|120201': 0.5383812952461626, '2|120201': 0.3047836419680463, '0|020111': 0.18592943085034475,
     '1|020111': 0.5710747600378533, '2|020111': 0.24299580911180213, '0|201111': 0.21640815862735074,
     '1|201111': 0.5718803855841523, '2|201111': 0.21171145578849687, '0|011112': 1.0, '1|011112': 0.0, '2|011112': 0.0,
     '0|111120': 0.0, '1|111120': 0.0, '2|111120': 1.0, '0|111202': 1.0, '1|111202': 0.0, '2|111202': 0.0,
     '0|112020': 0.016878903246375726, '1|112020': 0.5497521301801042, '2|112020': 0.4333689665735202, '0|202010': 0.0,
     '1|202010': 0.0, '2|202010': 1.0, '0|020102': 1.0, '1|020102': 0.0, '2|020102': 0.0, '0|201020': 0.0,
     '1|201020': 0.0, '2|201020': 1.0, '0|010202': 1.0, '1|010202': 0.0, '2|010202': 0.0,
     '0|011111': 0.20194059012484686, '1|011111': 0.5702553233764944, '2|011111': 0.22780408649865883, '0|111112': 1.0,
     '1|111112': 0.0, '2|111112': 0.0, '0|020200': 0.0, '1|020200': 0.0, '2|020200': 1.0, '0|202002': 1.0,
     '1|202002': 0.0, '2|202002': 0.0, '0|020112': 1.0, '1|020112': 0.0, '2|020112': 0.0, '0|201120': 0.0,
     '1|201120': 0.0, '2|201120': 1.0, '0|011202': 1.0, '1|011202': 0.0, '2|011202': 0.0,
     '0|111111': 0.20863916936795954, '1|111111': 0.572264242333917, '2|111111': 0.21909658829812337, '0|111110': 0.0,
     '1|111110': 0.0, '2|111110': 1.0, '0|111102': 1.0, '1|111102': 0.0, '2|111102': 0.0, '0|111020': 0.0,
     '1|111020': 0.0, '2|111020': 1.0, '0|201110': 0.0, '1|201110': 0.0, '2|201110': 1.0, '0|011102': 1.0,
     '1|011102': 0.0, '2|011102': 0.0, '0|011110': 0.0, '1|011110': 0.0, '2|011110': 1.0, '0|201112': 1.0,
     '1|201112': 0.0, '2|201112': 0.0, '0|011120': 0.0, '1|011120': 0.0, '2|011120': 1.0, '0|120200': 0.0,
     '1|120200': 0.0, '2|120200': 1.0},
    {'0|0200202': 1.0, '1|0200202': 0.0, '2|0200202': 0.0, '0|2002020': 0.5417325220572693,
     '1|2002020': 0.4582674779427306, '2|2002020': 0.0, '0|0020201': 0.0, '1|0020201': 0.4200257954972163,
     '2|0020201': 0.5799742045027836, '0|0202011': 0.5196900221654456, '1|0202011': 0.36143550870543645,
     '2|0202011': 0.11887446912911796, '0|2020110': 0.0, '1|2020110': 0.0, '2|2020110': 1.0, '0|0201102': 1.0,
     '1|0201102': 0.0, '2|0201102': 0.0, '0|2011020': 0.0, '1|2011020': 0.0, '2|2011020': 1.0, '0|0110202': 1.0,
     '1|0110202': 0.0, '2|0110202': 0.0, '0|1102020': 0.2674598462023414, '1|1102020': 0.5156436703246758,
     '2|1102020': 0.2168964834729828, '0|1020201': 0.14359327480346587, '1|1020201': 0.55728467320824,
     '2|1020201': 0.299122051988294, '0|0202012': 1.0, '1|0202012': 0.0, '2|0202012': 0.0, '0|2020120': 0.0,
     '1|2020120': 0.0, '2|2020120': 1.0, '0|0201202': 1.0, '1|0201202': 0.0, '2|0201202': 0.0,
     '0|2012020': 0.016329027623905815, '1|2012020': 0.5084490923921645, '2|2012020': 0.4752218799839296,
     '0|0120202': 1.0, '1|0120202': 0.0, '2|0120202': 0.0, '0|1202020': 0.0, '1|1202020': 0.0, '2|1202020': 1.0,
     '0|2020202': 1.0, '1|2020202': 0.0, '2|2020202': 0.0, '0|0202020': 0.17773704504293975,
     '1|0202020': 0.26417158380557343, '2|0202020': 0.5580913711514869, '0|2020201': 0.15911717061142347,
     '1|2020201': 0.5278786773039646, '2|2020201': 0.31300415208461185, '0|0120201': 0.15423755192931626,
     '1|0120201': 0.5387718941180696, '2|0120201': 0.3069905539526141, '0|1202011': 0.24054514728591825,
     '1|1202011': 0.5690320794848635, '2|1202011': 0.19042277322921827, '0|2020111': 0.18592943085034475,
     '1|2020111': 0.5710747600378533, '2|2020111': 0.24299580911180213, '0|0201111': 0.21640815862735074,
     '1|0201111': 0.5718803855841523, '2|0201111': 0.21171145578849687, '0|2011112': 1.0, '1|2011112': 0.0,
     '2|2011112': 0.0, '0|0111120': 0.0, '1|0111120': 0.0, '2|0111120': 1.0, '0|1111202': 1.0, '1|1111202': 0.0,
     '2|1111202': 0.0, '0|1112020': 0.01755950270029283, '1|1112020': 0.552865958072001,
     '2|1112020': 0.42957453922770616, '0|1120201': 0.16176938821924042, '1|1120201': 0.5376392995224016,
     '2|1120201': 0.300591312258358, '0|1202010': 0.0, '1|1202010': 0.0, '2|1202010': 1.0, '0|2020102': 1.0,
     '1|2020102': 0.0, '2|2020102': 0.0, '0|0201020': 0.0, '1|0201020': 0.0, '2|0201020': 1.0, '0|2010202': 1.0,
     '1|2010202': 0.0, '2|2010202': 0.0, '0|0102020': 0.4507228453238944, '1|0102020': 0.35810695552049127,
     '2|0102020': 0.1911701991556143, '0|1020202': 1.0, '1|1020202': 0.0, '2|1020202': 0.0,
     '0|2011111': 0.20194059012484686, '1|2011111': 0.5702553233764944, '2|2011111': 0.22780408649865883,
     '0|0111112': 1.0, '1|0111112': 0.0, '2|0111112': 0.0, '0|1111120': 0.0, '1|1111120': 0.0, '2|1111120': 1.0,
     '0|1120202': 1.0, '1|1120202': 0.0, '2|1120202': 0.0, '0|2020200': 0.0, '1|2020200': 0.0, '2|2020200': 1.0,
     '0|0202002': 1.0, '1|0202002': 0.0, '2|0202002': 0.0, '0|2020020': 0.0, '1|2020020': 0.0, '2|2020020': 1.0,
     '0|0020200': 0.0, '1|0020200': 0.0, '2|0020200': 1.0, '0|1202012': 1.0, '1|1202012': 0.0, '2|1202012': 0.0,
     '0|2020112': 1.0, '1|2020112': 0.0, '2|2020112': 0.0, '0|0201120': 0.0, '1|0201120': 0.0, '2|0201120': 1.0,
     '0|2011202': 1.0, '1|2011202': 0.0, '2|2011202': 0.0, '0|0112020': 0.01578260159947772,
     '1|0112020': 0.5447364125999674, '2|0112020': 0.43948098580055495, '0|0111111': 0.209465737514518,
     '1|0111111': 0.5729094076655052, '2|0111111': 0.2176248548199768, '0|1111110': 0.0, '1|1111110': 0.0,
     '2|1111110': 1.0, '0|1111102': 1.0, '1|1111102': 0.0, '2|1111102': 0.0, '0|1111020': 0.0, '1|1111020': 0.0,
     '2|1111020': 1.0, '0|1110202': 1.0, '1|1110202': 0.0, '2|1110202': 0.0, '0|0202010': 0.0, '1|0202010': 0.0,
     '2|0202010': 1.0, '0|0201110': 0.0, '1|0201110': 0.0, '2|0201110': 1.0, '0|2011102': 1.0, '1|2011102': 0.0,
     '2|2011102': 0.0, '0|0111020': 0.0, '1|0111020': 0.0, '2|0111020': 1.0, '0|2011110': 0.0, '1|2011110': 0.0,
     '2|2011110': 1.0, '0|0111102': 1.0, '1|0111102': 0.0, '2|0111102': 0.0, '0|1020200': 0.0, '1|1020200': 0.0,
     '2|1020200': 1.0, '0|1111112': 1.0, '1|1111112': 0.0, '2|1111112': 0.0, '0|0201112': 1.0, '1|0201112': 0.0,
     '2|0201112': 0.0, '0|2011120': 0.0, '1|2011120': 0.0, '2|2011120': 1.0, '0|0111202': 1.0, '1|0111202': 0.0,
     '2|0111202': 0.0, '0|1111111': 0.2080213555570024, '1|1111111': 0.5717820170584023,
     '2|1111111': 0.22019662738459536, '0|0120200': 0.0, '1|0120200': 0.0, '2|0120200': 1.0, '0|1202002': 1.0,
     '1|1202002': 0.0, '2|1202002': 0.0, '0|0111110': 0.0, '1|0111110': 0.0, '2|0111110': 1.0, '0|1120200': 0.0,
     '1|1120200': 0.0, '2|1120200': 1.0},
    {'0|02002020': 0.5417325220572693, '1|02002020': 0.4582674779427306, '2|02002020': 0.0, '0|20020201': 0.0,
     '1|20020201': 0.4200257954972163, '2|20020201': 0.5799742045027836, '0|00202011': 1.0, '1|00202011': 0.0,
     '2|00202011': 0.0, '0|02020110': 0.0, '1|02020110': 0.0, '2|02020110': 1.0, '0|20201102': 1.0, '1|20201102': 0.0,
     '2|20201102': 0.0, '0|02011020': 0.0, '1|02011020': 0.0, '2|02011020': 1.0, '0|20110202': 1.0, '1|20110202': 0.0,
     '2|20110202': 0.0, '0|01102020': 0.18755158258036164, '1|01102020': 0.586974929526137,
     '2|01102020': 0.22547348789350138, '0|11020201': 0.13865411818227052, '1|11020201': 0.5610850079257327,
     '2|11020201': 0.3002608738919968, '0|10202012': 1.0, '1|10202012': 0.0, '2|10202012': 0.0, '0|02020120': 0.0,
     '1|02020120': 0.0, '2|02020120': 1.0, '0|20201202': 1.0, '1|20201202': 0.0, '2|20201202': 0.0,
     '0|02012020': 0.016329027623905815, '1|02012020': 0.5084490923921645, '2|02012020': 0.4752218799839296,
     '0|20120202': 1.0, '1|20120202': 0.0, '2|20120202': 0.0, '0|01202020': 0.0, '1|01202020': 0.0, '2|01202020': 1.0,
     '0|12020202': 1.0, '1|12020202': 0.0, '2|12020202': 0.0, '0|20202020': 0.20029329760654668,
     '1|20202020': 0.29769707064489265, '2|20202020': 0.5020096317485607, '0|02020201': 0.15911717061142347,
     '1|02020201': 0.5278786773039646, '2|02020201': 0.31300415208461185, '0|20202012': 1.0, '1|20202012': 0.0,
     '2|20202012': 0.0, '0|20120201': 0.15423755192931626, '1|20120201': 0.5387718941180696,
     '2|20120201': 0.3069905539526141, '0|01202011': 0.24148926714368252, '1|01202011': 0.572096795697969,
     '2|01202011': 0.1864139371583485, '0|12020111': 0.18604948860072454, '1|12020111': 0.5761594490456867,
     '2|12020111': 0.23779106235358877, '0|20201111': 0.21640815862735074, '1|20201111': 0.5718803855841524,
     '2|20201111': 0.21171145578849687, '0|02011112': 1.0, '1|02011112': 0.0, '2|02011112': 0.0, '0|20111120': 0.0,
     '1|20111120': 0.0, '2|20111120': 1.0, '0|01111202': 1.0, '1|01111202': 0.0, '2|01111202': 0.0,
     '0|11112020': 0.016853619063563818, '1|11112020': 0.5482448797365924, '2|11112020': 0.4349015011998438,
     '0|11120201': 0.1600505828018474, '1|11120201': 0.5368558023605307, '2|11120201': 0.30309361483762187,
     '0|11202010': 0.0, '1|11202010': 0.0, '2|11202010': 1.0, '0|12020102': 1.0, '1|12020102': 0.0, '2|12020102': 0.0,
     '0|20201020': 0.0, '1|20201020': 0.0, '2|20201020': 1.0, '0|02010202': 1.0, '1|02010202': 0.0, '2|02010202': 0.0,
     '0|20102020': 0.4507228453238944, '1|20102020': 0.35810695552049127, '2|20102020': 0.1911701991556143,
     '0|01020202': 1.0, '1|01020202': 0.0, '2|01020202': 0.0, '0|10202020': 0.0, '1|10202020': 0.0, '2|10202020': 1.0,
     '0|02020202': 1.0, '1|02020202': 0.0, '2|02020202': 0.0, '0|20202011': 0.24011562752018764,
     '1|20202011': 0.5670775772682998, '2|20202011': 0.19280679521151245, '0|02020111': 0.18584161938467875,
     '1|02020111': 0.5673557665299702, '2|02020111': 0.24680261408535104, '0|02011111': 0.20194059012484686,
     '1|02011111': 0.5702553233764944, '2|02011111': 0.22780408649865883, '0|20111112': 1.0, '1|20111112': 0.0,
     '2|20111112': 0.0, '0|01111120': 0.0, '1|01111120': 0.0, '2|01111120': 1.0, '0|11111202': 1.0, '1|11111202': 0.0,
     '2|11111202': 0.0, '0|11120202': 1.0, '1|11120202': 0.0, '2|11120202': 0.0, '0|11202020': 0.0, '1|11202020': 0.0,
     '2|11202020': 1.0, '0|02020200': 0.0, '1|02020200': 0.0, '2|02020200': 1.0, '0|20202002': 1.0, '1|20202002': 0.0,
     '2|20202002': 0.0, '0|02020020': 0.0, '1|02020020': 0.0, '2|02020020': 1.0, '0|20200202': 1.0, '1|20200202': 0.0,
     '2|20200202': 0.0, '0|11020202': 1.0, '1|11020202': 0.0, '2|11020202': 0.0, '0|20020200': 0.0, '1|20020200': 0.0,
     '2|20020200': 1.0, '0|00202002': 1.0, '1|00202002': 0.0, '2|00202002': 0.0, '0|00202012': 1.0, '1|00202012': 0.0,
     '2|00202012': 0.0, '0|01202012': 1.0, '1|01202012': 0.0, '2|01202012': 0.0, '0|12020120': 0.0, '1|12020120': 0.0,
     '2|12020120': 1.0, '0|02020112': 1.0, '1|02020112': 0.0, '2|02020112': 0.0, '0|20201120': 0.0, '1|20201120': 0.0,
     '2|20201120': 1.0, '0|02011202': 1.0, '1|02011202': 0.0, '2|02011202': 0.0, '0|20112020': 0.01578260159947772,
     '1|20112020': 0.5447364125999674, '2|20112020': 0.43948098580055495, '0|01120201': 0.1645793384467881,
     '1|01120201': 0.5389201821668265, '2|01120201': 0.2965004793863854, '0|11202011': 0.23874788494077837,
     '1|11202011': 0.5631979695431473, '2|11202011': 0.19805414551607448, '0|20111111': 0.209465737514518,
     '1|20111111': 0.5729094076655052, '2|20111111': 0.2176248548199768, '0|01111110': 0.0, '1|01111110': 0.0,
     '2|01111110': 1.0, '0|11111102': 1.0, '1|11111102': 0.0, '2|11111102': 0.0, '0|11111020': 0.0, '1|11111020': 0.0,
     '2|11111020': 1.0, '0|11110202': 1.0, '1|11110202': 0.0, '2|11110202': 0.0, '0|11102020': 0.4403701642081826,
     '1|11102020': 0.3612927915391038, '2|11102020': 0.19833704425271362, '0|20202010': 0.0, '1|20202010': 0.0,
     '2|20202010': 1.0, '0|02020102': 1.0, '1|02020102': 0.0, '2|02020102': 0.0, '0|01020201': 0.16427997261008068,
     '1|01020201': 0.5413677096668552, '2|01020201': 0.294352317723064, '0|10202011': 0.2856010214378385,
     '1|10202011': 0.5422475751148087, '2|10202011': 0.1721514034473527, '0|01120202': 1.0, '1|01120202': 0.0,
     '2|01120202': 0.0, '0|20201110': 0.0, '1|20201110': 0.0, '2|20201110': 1.0, '0|02011102': 1.0, '1|02011102': 0.0,
     '2|02011102': 0.0, '0|20111020': 0.0, '1|20111020': 0.0, '2|20111020': 1.0, '0|01110202': 1.0, '1|01110202': 0.0,
     '2|01110202': 0.0, '0|01202010': 0.0, '1|01202010': 0.0, '2|01202010': 1.0, '0|02011110': 0.0, '1|02011110': 0.0,
     '2|02011110': 1.0, '0|20111102': 1.0, '1|20111102': 0.0, '2|20111102': 0.0, '0|01111020': 0.0, '1|01111020': 0.0,
     '2|01111020': 1.0, '0|11020200': 0.0, '1|11020200': 0.0, '2|11020200': 1.0, '0|10202002': 1.0, '1|10202002': 0.0,
     '2|10202002': 0.0, '0|01111112': 1.0, '1|01111112': 0.0, '2|01111112': 0.0, '0|11111120': 0.0, '1|11111120': 0.0,
     '2|11111120': 1.0, '0|01020200': 0.0, '1|01020200': 0.0, '2|01020200': 1.0, '0|20201112': 1.0, '1|20201112': 0.0,
     '2|20201112': 0.0, '0|02011120': 0.0, '1|02011120': 0.0, '2|02011120': 1.0, '0|20111202': 1.0, '1|20111202': 0.0,
     '2|20111202': 0.0, '0|01112020': 0.018403952287698058, '1|01112020': 0.5583941605839415,
     '2|01112020': 0.4232018871283603, '0|10202010': 0.0, '1|10202010': 0.0, '2|10202010': 1.0, '0|12020110': 0.0,
     '1|12020110': 0.0, '2|12020110': 1.0, '0|01111111': 0.20693325224266382, '1|01111111': 0.5668744615072728,
     '2|01111111': 0.22619228625006338, '0|11111111': 0.20883625597813707, '1|11111111': 0.5754573749335762,
     '2|11111111': 0.21570636908828666, '0|11111110': 0.0, '1|11111110': 0.0, '2|11111110': 1.0, '0|11202012': 1.0,
     '1|11202012': 0.0, '2|11202012': 0.0, '0|20120200': 0.0, '1|20120200': 0.0, '2|20120200': 1.0, '0|01202002': 1.0,
     '1|01202002': 0.0, '2|01202002': 0.0, '0|12020020': 0.0, '1|12020020': 0.0, '2|12020020': 1.0, '0|12020112': 1.0,
     '1|12020112': 0.0, '2|12020112': 0.0, '0|20111110': 0.0, '1|20111110': 0.0, '2|20111110': 1.0, '0|01111102': 1.0,
     '1|01111102': 0.0, '2|01111102': 0.0, '0|11111112': 1.0, '1|11111112': 0.0, '2|11111112': 0.0, '0|11120200': 0.0,
     '1|11120200': 0.0, '2|11120200': 1.0, '0|11202002': 1.0, '1|11202002': 0.0, '2|11202002': 0.0, '0|01120200': 0.0,
     '1|01120200': 0.0, '2|01120200': 1.0}
    ]

    ####################################################################################################################

    print("\n---TESTANDO MÓDULO---")

    # leafs = folhas_4
    #
    # States_data_generator(leafs, alfabeto, conditional_probs)

    #   =====================================================
    import Sequences_Analyser

    def leafs_probs_data(Folhas, alfabeto, conditional_probs):

        lpd = {}  # dicinario para armazenar as probabilidades condicionais de contextos analisados

        for f in Folhas:

            adendo = {}  # varivel auxiliar para armazenar as probabilidades condicionais tomadas no atual ciclo

            # na lista de dicionarios de probab. condic. correspondente ao contexto (folha) 'f' analisada no momento...
            for k1,v1 in conditional_probs[len(f)].items():

                if k1.endswith(f): #...se a chave no dic. termina pelo contexto 'f'...

                    adendo[k1] = v1  # ...armazene esta prob. condicional em 'adendo'.

            if not adendo:  # se 'adendo' não recebeu qualquer dado (ou seja, 'f' não possui prob. cond. calculada)...

                for l in alfabeto:

                    adendo[l + "|" + f] = 0.0  # ... adicione 'f' em adendo com prob. cond. igual a zero.

                lpd[f] = adendo  # 'lpd' recebe 'adendo', guardando assim os dados de prob. cond. do contexto 'f'

            else:  # os dados que ja foram adiconados em 'adendo'...

                lpd[f] = adendo  # ...são passados para 'lpd'

        return lpd  # RETORNA O DICIONARIO QUE CONTEM CADA FOLHA (CONTEXTO) COM SUA RESPECTIVA PROBABILIDADE CONDICIONAL

    def generate_states_data(Folhas, alfabeto, COP):

        states_data = {}  #dicionario que armazenará os estados uteis para construção de maquina de estados

        outs = []  # variavel auxiliar para armazenamento das tuplas que correspondem aos outedges de um estado

        for l in Folhas:  # para cada elemento  'l' no conjutno de contextos (folhas complemntadas)...

            pbs = COP[l]  # ... tomamos o contexto e seus dados de outedges presente no dicionacio de dados 'COP'...

            for letter in alfabeto:  # ...e para cada letra do alfabeto da sequencia...

                sufix = []  # variavel auxiliar para armazenar

                next = l + letter  #...geramos 'next' pela contatenação de 'l' com 'letter' à esquerda...

                # print("\nANALISANDO PALAVRA ", next)

                sufix.append(next)

                out_prob = pbs[letter + "|" + l]
                if out_prob != 0:
                    outs.append((letter, sufix[0], out_prob))


            states_data[l] = outs  # 'states_data' é então preenchido com o estado 'l' e suas tuplas de outedge 'outs'

            outs=[]  # outs é reinicializada para a execução de um novo ciclo da análise.

        # for s in states_data.items():
        #    print(s)

        return states_data  # RETORNA O DICIONARIO COMPOSTO PELO CONJUNTO DE ESTADO INICIAIS GERADOS COM AS FOLHAS

    L = 35  # Limita o comprimento de palavras para calculos probabilisticos e spliting

    """Leitura de Sequência para sistema MaFaulDa"""
    with open('MaFaulDa_Normal_C3_12288_BIN.txt', 'r') as f:
    # with open('MaFaulDa_Normal_12288-C3_TERN.txt', 'r') as f:
        for linha in f:
            sequencia = linha
    sequence_lenght = len(sequencia)

    """Calculos probabilisticos utilizados para obtenção das máquina D-markov"""
    probabilidades, seq_alf = Sequences_Analyser.calc_probs(sequencia, L)
    probabilidades_condicionais = Sequences_Analyser.calc_cond_probs(probabilidades, seq_alf, L)

    alfabeto_da_sequencia = sorted(seq_alf)  # organiza o alfabeto de simbolos da sequencia analisada

    teste = ['00']

    X = leafs_probs_data(teste, alfabeto_da_sequencia,probabilidades_condicionais)

    print(generate_states_data(teste,alfabeto_da_sequencia,X))

